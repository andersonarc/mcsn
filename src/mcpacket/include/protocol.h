/*
  This file was generated by mcd2c.py
  It should not be edited by hand.
*/

#ifndef PROTOCOL_H
#define PROTOCOL_H

#include <stdint.h>
#include <malloc.h>
#include <string.h>
#include <stdio.h>
#include "particle_types.h"
#include "translation_utils.h"
#include "data_utils.h"
//#include "nbt.h"

#define MC_PROTOCOL_VERSION 736

typedef enum packet_direction {
  SERVERBOUND,
  CLIENTBOUND,
  DIRECTION_MAX
} packet_direction;

typedef enum packet_state {
  HANDSHAKING,
  STATUS,
  LOGIN,
  PLAY,
  STATE_MAX
} packet_state;

#define PACKET                       \
  packet_state packet_state;         \
  packet_direction packet_direction; \
  int32_t packet_id;                 \
const string_t packet_name; 

typedef struct Packet {
  PACKET
} Packet;
enum clientbound_handshaking_ids {
  CLIENTBOUND_HANDSHAKING_MAX
};

enum serverbound_handshaking_ids {
  SB_HS_SET_PROTOCOL,
  SERVERBOUND_HANDSHAKING_MAX
};

enum clientbound_status_ids {
  CB_ST_SERVER_INFO,
  CB_ST_PING,
  CLIENTBOUND_STATUS_MAX
};

enum serverbound_status_ids {
  SB_ST_PING_START,
  SB_ST_PING,
  SERVERBOUND_STATUS_MAX
};

enum clientbound_login_ids {
  CB_LG_DISCONNECT,
  CB_LG_ENCRYPTION_BEGIN,
  CB_LG_SUCCESS,
  CB_LG_COMPRESS,
  CB_LG_LOGIN_PLUGIN_REQUEST,
  CLIENTBOUND_LOGIN_MAX
};

enum serverbound_login_ids {
  SB_LG_LOGIN_START,
  SB_LG_ENCRYPTION_BEGIN,
  SB_LG_LOGIN_PLUGIN_RESPONSE,
  SERVERBOUND_LOGIN_MAX
};

enum clientbound_play_ids {
  CB_PL_SPAWN_ENTITY,
  CB_PL_SPAWN_ENTITY_EXPERIENCE_ORB,
  CB_PL_SPAWN_ENTITY_LIVING,
  CB_PL_SPAWN_ENTITY_PAINTING,
  CB_PL_NAMED_ENTITY_SPAWN,
  CB_PL_ANIMATION,
  CB_PL_STATISTICS,
  CB_PL_ACKNOWLEDGE_PLAYER_DIGGING,
  CB_PL_BLOCK_BREAK_ANIMATION,
  CB_PL_TILE_ENTITY_DATA,
  CB_PL_BLOCK_ACTION,
  CB_PL_BLOCK_CHANGE,
  CB_PL_BOSS_BAR,
  CB_PL_DIFFICULTY,
  CB_PL_CHAT,
  CB_PL_MULTI_BLOCK_CHANGE,
  CB_PL_TAB_COMPLETE,
  CB_PL_DECLARE_COMMANDS,
  CB_PL_TRANSACTION,
  CB_PL_CLOSE_WINDOW,
  CB_PL_WINDOW_ITEMS,
  CB_PL_CRAFT_PROGRESS_BAR,
  CB_PL_SET_SLOT,
  CB_PL_SET_COOLDOWN,
  CB_PL_CUSTOM_PAYLOAD,
  CB_PL_NAMED_SOUND_EFFECT,
  CB_PL_KICK_DISCONNECT,
  CB_PL_ENTITY_STATUS,
  CB_PL_EXPLOSION,
  CB_PL_UNLOAD_CHUNK,
  CB_PL_GAME_STATE_CHANGE,
  CB_PL_OPEN_HORSE_WINDOW,
  CB_PL_KEEP_ALIVE,
  CB_PL_MAP_CHUNK,
  CB_PL_WORLD_EVENT,
  CB_PL_WORLD_PARTICLES,
  CB_PL_UPDATE_LIGHT,
  CB_PL_LOGIN,
  CB_PL_MAP,
  CB_PL_TRADE_LIST,
  CB_PL_REL_ENTITY_MOVE,
  CB_PL_ENTITY_MOVE_LOOK,
  CB_PL_ENTITY_LOOK,
  CB_PL_ENTITY,
  CB_PL_VEHICLE_MOVE,
  CB_PL_OPEN_BOOK,
  CB_PL_OPEN_WINDOW,
  CB_PL_OPEN_SIGN_ENTITY,
  CB_PL_CRAFT_RECIPE_RESPONSE,
  CB_PL_ABILITIES,
  CB_PL_COMBAT_EVENT,
  CB_PL_PLAYER_INFO,
  CB_PL_FACE_PLAYER,
  CB_PL_POSITION,
  CB_PL_UNLOCK_RECIPES,
  CB_PL_ENTITY_DESTROY,
  CB_PL_REMOVE_ENTITY_EFFECT,
  CB_PL_RESOURCE_PACK_SEND,
  CB_PL_RESPAWN,
  CB_PL_ENTITY_HEAD_ROTATION,
  CB_PL_SELECT_ADVANCEMENT_TAB,
  CB_PL_WORLD_BORDER,
  CB_PL_CAMERA,
  CB_PL_HELD_ITEM_SLOT,
  CB_PL_UPDATE_VIEW_POSITION,
  CB_PL_UPDATE_VIEW_DISTANCE,
  CB_PL_SPAWN_POSITION,
  CB_PL_SCOREBOARD_DISPLAY_OBJECTIVE,
  CB_PL_ENTITY_METADATA,
  CB_PL_ATTACH_ENTITY,
  CB_PL_ENTITY_VELOCITY,
  CB_PL_ENTITY_EQUIPMENT,
  CB_PL_EXPERIENCE,
  CB_PL_UPDATE_HEALTH,
  CB_PL_SCOREBOARD_OBJECTIVE,
  CB_PL_SET_PASSENGERS,
  CB_PL_TEAMS,
  CB_PL_SCOREBOARD_SCORE,
  CB_PL_UPDATE_TIME,
  CB_PL_TITLE,
  CB_PL_ENTITY_SOUND_EFFECT,
  CB_PL_SOUND_EFFECT,
  CB_PL_STOP_SOUND,
  CB_PL_PLAYERLIST_HEADER,
  CB_PL_NBT_QUERY_RESPONSE,
  CB_PL_COLLECT,
  CB_PL_ENTITY_TELEPORT,
  CB_PL_ADVANCEMENTS,
  CB_PL_ENTITY_UPDATE_ATTRIBUTES,
  CB_PL_ENTITY_EFFECT,
  CB_PL_DECLARE_RECIPES,
  CB_PL_TAGS,
  CLIENTBOUND_PLAY_MAX
};

enum serverbound_play_ids {
  SB_PL_TELEPORT_CONFIRM,
  SB_PL_QUERY_BLOCK_NBT,
  SB_PL_SET_DIFFICULTY,
  SB_PL_CHAT,
  SB_PL_CLIENT_COMMAND,
  SB_PL_SETTINGS,
  SB_PL_TAB_COMPLETE,
  SB_PL_TRANSACTION,
  SB_PL_ENCHANT_ITEM,
  SB_PL_WINDOW_CLICK,
  SB_PL_CLOSE_WINDOW,
  SB_PL_CUSTOM_PAYLOAD,
  SB_PL_EDIT_BOOK,
  SB_PL_QUERY_ENTITY_NBT,
  SB_PL_USE_ENTITY,
  SB_PL_GENERATE_STRUCTURE,
  SB_PL_KEEP_ALIVE,
  SB_PL_LOCK_DIFFICULTY,
  SB_PL_POSITION,
  SB_PL_POSITION_LOOK,
  SB_PL_LOOK,
  SB_PL_FLYING,
  SB_PL_VEHICLE_MOVE,
  SB_PL_STEER_BOAT,
  SB_PL_PICK_ITEM,
  SB_PL_CRAFT_RECIPE_REQUEST,
  SB_PL_ABILITIES,
  SB_PL_BLOCK_DIG,
  SB_PL_ENTITY_ACTION,
  SB_PL_STEER_VEHICLE,
  SB_PL_CRAFTING_BOOK_DATA,
  SB_PL_NAME_ITEM,
  SB_PL_RESOURCE_PACK_RECEIVE,
  SB_PL_ADVANCEMENT_TAB,
  SB_PL_SELECT_TRADE,
  SB_PL_SET_BEACON_EFFECT,
  SB_PL_HELD_ITEM_SLOT,
  SB_PL_UPDATE_COMMAND_BLOCK,
  SB_PL_UPDATE_COMMAND_BLOCK_MINECART,
  SB_PL_SET_CREATIVE_SLOT,
  SB_PL_UPDATE_JIGSAW_BLOCK,
  SB_PL_UPDATE_STRUCTURE_BLOCK,
  SB_PL_UPDATE_SIGN,
  SB_PL_ARM_ANIMATION,
  SB_PL_SPECTATE,
  SB_PL_BLOCK_PLACE,
  SB_PL_USE_ITEM,
  SERVERBOUND_PLAY_MAX
};

 
 
 
 
 
 
 
 
 
 
optional_typedef(char_vector_t)
 
typedef struct {
  int64_t categoryId;
  int64_t statisticId;
  int64_t value;
} Statistics_entries_type;
vector_typedef(Statistics_entries_type)
 
typedef struct {
  uint8_t horizontalPos;
  uint8_t y;
  int64_t blockId;
} MultiBlockChange_records_type;
vector_typedef(MultiBlockChange_records_type)
 
typedef struct {
  string_t match;
  string_t_optional_t tooltip;
} TabComplete_matches_type;
vector_typedef(TabComplete_matches_type)
 
vector_typedef(int64_t)
 
typedef struct {
  struct {
    uint8_t has_custom_suggestions;
    uint8_t has_redirect_node;
    uint8_t has_command;
    uint8_t command_node_type;
  } flags;
  int64_t_vector_t children;
  int64_t redirectNode;
  string_t extraNodeData_1;
  struct {
    string_t name;
    string_t parser;
    struct {
      struct {
        uint8_t max_present;
        uint8_t min_present;
      } flags;
      double min;
      double max;
    } brigadier_double;
    struct {
      struct {
        uint8_t max_present;
        uint8_t min_present;
      } flags;
      float min;
      float max;
    } brigadier_float;
    struct {
      struct {
        uint8_t max_present;
        uint8_t min_present;
      } flags;
      int32_t min;
      int32_t max;
    } brigadier_integer;
    int64_t brigadier_string;
    int8_t minecraft_entity;
    int8_t minecraft_score_holder;
    string_t suggests;
  } extraNodeData_2;
} DeclareCommands_nodes_type;
vector_typedef(DeclareCommands_nodes_type)
 
typedef struct {
  int8_t x;
  int8_t y;
  int8_t z;
} Explosion_affectedBlockOffsets_type;
vector_typedef(Explosion_affectedBlockOffsets_type)
 
vector_typedef(nbt_tag_compound)
 
vector_typedef(string_t)
 
typedef struct {
  int64_t type;
  int8_t x;
  int8_t y;
  uint8_t direction;
  string_t_optional_t displayName;
} Map_icons_type;
vector_typedef(Map_icons_type)
 
optional_typedef(mc_slot)
 
typedef struct {
  mc_slot inputItem1;
  mc_slot outputItem;
  mc_slot_optional_t inputItem2;
  uint8_t tradeDisabled;
  int32_t nbTradeUses;
  int32_t maximumNbTradeUses;
  int32_t xp;
  int32_t specialPrice;
  float priceMultiplier;
  int32_t demand;
} TradeList_trades_type;
vector_typedef(TradeList_trades_type)
 
typedef struct {
  string_t name;
  string_t value;
  string_t_optional_t signature;
} PlayerInfo_properties_type;
vector_typedef(PlayerInfo_properties_type)
 
typedef struct {
  mc_uuid UUID;
  string_t name;
  PlayerInfo_properties_type_vector_t properties;
  int64_t gamemode;
  int64_t ping;
  string_t_optional_t displayName;
} PlayerInfo_data_type;
vector_typedef(PlayerInfo_data_type)
 
typedef struct {
  string_t title;
  string_t description;
  mc_slot icon;
  int64_t frameType;
  struct {
    uint8_t hidden;
    uint8_t show_toast;
    uint8_t has_background_texture;
  } flags;
  string_t backgroundTexture;
  float xCord;
  float yCord;
} displayData_type;
optional_typedef(displayData_type)
 
typedef struct {
  string_t key;
  /* 'value' is a void type */
} Advancements_criteria_type;
vector_typedef(Advancements_criteria_type)
 
vector_typedef(string_t_vector_t)
 
typedef struct {
  string_t key;
  struct {
    string_t_optional_t parentId;
    displayData_type_optional_t displayData;
    Advancements_criteria_type_vector_t criteria;
    string_t_vector_t_vector_t requirements;
  } value;
} Advancements_advancementMapping_type;
vector_typedef(Advancements_advancementMapping_type)
 
optional_typedef(int64_t)
 
typedef struct {
  string_t criterionIdentifier;
  int64_t_optional_t criterionProgress;
} Advancements_value_type;
vector_typedef(Advancements_value_type)
 
typedef struct {
  string_t key;
  Advancements_value_type_vector_t value;
} Advancements_progressMapping_type;
vector_typedef(Advancements_progressMapping_type)
 
typedef struct {
  mc_uuid uuid;
  double amount;
  int8_t operation;
} EntityUpdateAttributes_modifiers_type;
vector_typedef(EntityUpdateAttributes_modifiers_type)
 
typedef struct {
  string_t key;
  double value;
  EntityUpdateAttributes_modifiers_type_vector_t modifiers;
} EntityUpdateAttributes_properties_type;
vector_typedef(EntityUpdateAttributes_properties_type)
 
vector_typedef(mc_slot_vector_t)
 
vector_typedef(mc_slot_vector_t_vector_t)
 
typedef struct {
  string_t type;
  string_t recipeId;
  struct {
    string_t group;
    mc_slot_vector_t_vector_t ingredients;
    mc_slot result;
  } minecraft_crafting_shapeless;
  struct {
    int64_t width;
    int64_t height;
    string_t group;
    mc_slot_vector_t_vector_t_vector_t ingredients;
    mc_slot result;
  } minecraft_crafting_shaped;
  mc_smelting minecraft_smelting;
  mc_smelting minecraft_blasting;
  mc_smelting minecraft_smoking;
  mc_smelting minecraft_campfire_cooking;
  struct {
    string_t group;
    mc_slot_vector_t ingredient;
    mc_slot result;
  } minecraft_stonecutting;
  struct {
    mc_slot_vector_t base;
    mc_slot_vector_t addition;
    mc_slot result;
  } minecraft_smithing;
} DeclareRecipes_recipes_type;
vector_typedef(DeclareRecipes_recipes_type)
 
extern const char* serverbound_handshaking_cstrings[SERVERBOUND_HANDSHAKING_MAX];
extern const char* clientbound_status_cstrings[CLIENTBOUND_STATUS_MAX];
extern const char* serverbound_status_cstrings[SERVERBOUND_STATUS_MAX];
extern const char* clientbound_login_cstrings[CLIENTBOUND_LOGIN_MAX];
extern const char* serverbound_login_cstrings[SERVERBOUND_LOGIN_MAX];
extern const char* clientbound_play_cstrings[CLIENTBOUND_PLAY_MAX];
extern const char* serverbound_play_cstrings[SERVERBOUND_PLAY_MAX];

extern const char **protocol_cstrings[STATE_MAX][DIRECTION_MAX];
extern const int protocol_max_ids[STATE_MAX][DIRECTION_MAX];

Packet* make_packet(packet_state state, packet_direction dir, int packet_id);

typedef struct ServerboundSetProtocol {
  PACKET
  int64_t protocolVersion;
  string_t serverHost;
  uint16_t serverPort;
  int64_t nextState;
} ServerboundSetProtocol;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundLegacyServerListPing {
  PACKET
  uint8_t payload;
} ServerboundLegacyServerListPing;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundServerInfo {
  PACKET
  string_t response;
} ClientboundServerInfo;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundPing {
  PACKET
  int64_t time;
} ClientboundPing;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundPingStart {
  PACKET
} ServerboundPingStart;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundPing {
  PACKET
  int64_t time;
} ServerboundPing;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundDisconnect {
  PACKET
  string_t reason;
} ClientboundDisconnect;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundEncryptionBegin {
  PACKET
  string_t serverId;
  char_vector_t publicKey;
  char_vector_t verifyToken;
} ClientboundEncryptionBegin;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundSuccess {
  PACKET
  mc_uuid uuid;
  string_t username;
} ClientboundSuccess;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundCompress {
  PACKET
  int64_t threshold;
} ClientboundCompress;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundLoginPluginRequest {
  PACKET
  int64_t messageId;
  string_t channel;
  char_vector_t data;
} ClientboundLoginPluginRequest;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundLoginStart {
  PACKET
  string_t username;
} ServerboundLoginStart;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundEncryptionBegin {
  PACKET
  char_vector_t sharedSecret;
  char_vector_t verifyToken;
} ServerboundEncryptionBegin;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundLoginPluginResponse {
  PACKET
  int64_t messageId;
  char_vector_t_optional_t data;
} ServerboundLoginPluginResponse;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundSpawnEntity {
  PACKET
  int64_t entityId;
  mc_uuid objectUUID;
  int64_t type;
  double x;
  double y;
  double z;
  int8_t pitch;
  int8_t yaw;
  int32_t objectData;
  int16_t velocityX;
  int16_t velocityY;
  int16_t velocityZ;
} ClientboundSpawnEntity;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundSpawnEntityExperienceOrb {
  PACKET
  int64_t entityId;
  double x;
  double y;
  double z;
  int16_t count;
} ClientboundSpawnEntityExperienceOrb;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundSpawnEntityLiving {
  PACKET
  int64_t entityId;
  mc_uuid entityUUID;
  int64_t type;
  double x;
  double y;
  double z;
  int8_t yaw;
  int8_t pitch;
  int8_t headPitch;
  int16_t velocityX;
  int16_t velocityY;
  int16_t velocityZ;
} ClientboundSpawnEntityLiving;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundSpawnEntityPainting {
  PACKET
  int64_t entityId;
  mc_uuid entityUUID;
  int64_t title;
  mc_position location;
  uint8_t direction;
} ClientboundSpawnEntityPainting;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundNamedEntitySpawn {
  PACKET
  int64_t entityId;
  mc_uuid playerUUID;
  double x;
  double y;
  double z;
  int8_t yaw;
  int8_t pitch;
} ClientboundNamedEntitySpawn;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundAnimation {
  PACKET
  int64_t entityId;
  uint8_t animation;
} ClientboundAnimation;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundStatistics {
  PACKET
  Statistics_entries_type_vector_t entries;
} ClientboundStatistics;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundAcknowledgePlayerDigging {
  PACKET
  mc_position location;
  int64_t block;
  int64_t status;
  uint8_t successful;
} ClientboundAcknowledgePlayerDigging;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundBlockBreakAnimation {
  PACKET
  int64_t entityId;
  mc_position location;
  int8_t destroyStage;
} ClientboundBlockBreakAnimation;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundTileEntityData {
  PACKET
  mc_position location;
  uint8_t action;
  nbt_tag_compound_optional_t nbtData;
} ClientboundTileEntityData;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundBlockAction {
  PACKET
  mc_position location;
  uint8_t byte1;
  uint8_t byte2;
  int64_t blockId;
} ClientboundBlockAction;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundBlockChange {
  PACKET
  mc_position location;
  int64_t type;
} ClientboundBlockChange;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundBossBar {
  PACKET
  mc_uuid entityUUID;
  int64_t action;
  string_t title;
  float health;
  int64_t color;
  int64_t dividers;
  uint8_t flags;
} ClientboundBossBar;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundDifficulty {
  PACKET
  uint8_t difficulty;
  uint8_t difficultyLocked;
} ClientboundDifficulty;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundChat {
  PACKET
  string_t message;
  int8_t position;
  mc_uuid sender;
} ClientboundChat;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundMultiBlockChange {
  PACKET
  int32_t chunkX;
  int32_t chunkZ;
  MultiBlockChange_records_type_vector_t records;
} ClientboundMultiBlockChange;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundTabComplete {
  PACKET
  int64_t transactionId;
  int64_t start;
  int64_t length;
  TabComplete_matches_type_vector_t matches;
} ClientboundTabComplete;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundDeclareCommands {
  PACKET
  DeclareCommands_nodes_type_vector_t nodes;
  int64_t rootIndex;
} ClientboundDeclareCommands;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundTransaction {
  PACKET
  int8_t windowId;
  int16_t action;
  uint8_t accepted;
} ClientboundTransaction;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundCloseWindow {
  PACKET
  uint8_t windowId;
} ClientboundCloseWindow;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundWindowItems {
  PACKET
  uint8_t windowId;
  mc_slot_vector_t items;
} ClientboundWindowItems;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundCraftProgressBar {
  PACKET
  uint8_t windowId;
  int16_t property;
  int16_t value;
} ClientboundCraftProgressBar;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundSetSlot {
  PACKET
  int8_t windowId;
  int16_t slot;
  mc_slot item;
} ClientboundSetSlot;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundSetCooldown {
  PACKET
  int64_t itemID;
  int64_t cooldownTicks;
} ClientboundSetCooldown;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundCustomPayload {
  PACKET
  string_t channel;
  char_vector_t data;
} ClientboundCustomPayload;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundNamedSoundEffect {
  PACKET
  string_t soundName;
  int64_t soundCategory;
  int32_t x;
  int32_t y;
  int32_t z;
  float volume;
  float pitch;
} ClientboundNamedSoundEffect;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundKickDisconnect {
  PACKET
  string_t reason;
} ClientboundKickDisconnect;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundEntityStatus {
  PACKET
  int32_t entityId;
  int8_t entityStatus;
} ClientboundEntityStatus;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundExplosion {
  PACKET
  float x;
  float y;
  float z;
  float radius;
  Explosion_affectedBlockOffsets_type_vector_t affectedBlockOffsets;
  float playerMotionX;
  float playerMotionY;
  float playerMotionZ;
} ClientboundExplosion;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundUnloadChunk {
  PACKET
  int32_t chunkX;
  int32_t chunkZ;
} ClientboundUnloadChunk;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundGameStateChange {
  PACKET
  uint8_t reason;
  float gameMode;
} ClientboundGameStateChange;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundOpenHorseWindow {
  PACKET
  uint8_t windowId;
  int64_t nbSlots;
  int32_t entityId;
} ClientboundOpenHorseWindow;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundKeepAlive {
  PACKET
  int64_t keepAliveId;
} ClientboundKeepAlive;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundMapChunk {
  PACKET
  int32_t x;
  int32_t z;
  uint8_t groundUp;
  uint8_t ignoreOldData;
  int64_t bitMap;
  nbt_tag_compound heightmaps;
  int32_t_vector_t biomes; /* 1024> */
  char_vector_t chunkData;
  nbt_tag_compound_vector_t blockEntities;
} ClientboundMapChunk;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundWorldEvent {
  PACKET
  int32_t effectId;
  mc_position location;
  int32_t data;
  uint8_t global;
} ClientboundWorldEvent;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundWorldParticles {
  PACKET
  int32_t particleId;
  uint8_t longDistance;
  double x;
  double y;
  double z;
  float offsetX;
  float offsetY;
  float offsetZ;
  float particleData;
  int32_t particles;
  mc_particle data;
} ClientboundWorldParticles;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundUpdateLight {
  PACKET
  int64_t chunkX;
  int64_t chunkZ;
  uint8_t trustEdges;
  int64_t skyLightMask;
  int64_t blockLightMask;
  int64_t emptySkyLightMask;
  int64_t emptyBlockLightMask;
  char_vector_t data;
} ClientboundUpdateLight;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundLogin {
  PACKET
  int32_t entityId;
  uint8_t gameMode;
  uint8_t previousGameMode;
  string_t_vector_t worldNames;
  nbt_tag_compound dimensionCodec;
  string_t dimension;
  string_t worldName;
  int64_t hashedSeed;
  uint8_t maxPlayers;
  int64_t viewDistance;
  uint8_t reducedDebugInfo;
  uint8_t enableRespawnScreen;
  uint8_t isDebug;
  uint8_t isFlat;
} ClientboundLogin;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundMap {
  PACKET
  int64_t itemDamage;
  int8_t scale;
  uint8_t trackingPosition;
  uint8_t locked;
  Map_icons_type_vector_t icons;
  int8_t columns;
  int8_t rows;
  int8_t x;
  int8_t y;
  char_vector_t data;
} ClientboundMap;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundTradeList {
  PACKET
  int64_t windowId;
  TradeList_trades_type_vector_t trades;
  int64_t villagerLevel;
  int64_t experience;
  uint8_t isRegularVillager;
  uint8_t canRestock;
} ClientboundTradeList;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundRelEntityMove {
  PACKET
  int64_t entityId;
  int16_t dX;
  int16_t dY;
  int16_t dZ;
  uint8_t onGround;
} ClientboundRelEntityMove;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundEntityMoveLook {
  PACKET
  int64_t entityId;
  int16_t dX;
  int16_t dY;
  int16_t dZ;
  int8_t yaw;
  int8_t pitch;
  uint8_t onGround;
} ClientboundEntityMoveLook;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundEntityLook {
  PACKET
  int64_t entityId;
  int8_t yaw;
  int8_t pitch;
  uint8_t onGround;
} ClientboundEntityLook;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundEntity {
  PACKET
  int64_t entityId;
} ClientboundEntity;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundVehicleMove {
  PACKET
  double x;
  double y;
  double z;
  float yaw;
  float pitch;
} ClientboundVehicleMove;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundOpenBook {
  PACKET
  int64_t hand;
} ClientboundOpenBook;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundOpenWindow {
  PACKET
  int64_t windowId;
  int64_t inventoryType;
  string_t windowTitle;
} ClientboundOpenWindow;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundOpenSignEntity {
  PACKET
  mc_position location;
} ClientboundOpenSignEntity;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundCraftRecipeResponse {
  PACKET
  int8_t windowId;
  string_t recipe;
} ClientboundCraftRecipeResponse;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundAbilities {
  PACKET
  int8_t flags;
  float flyingSpeed;
  float walkingSpeed;
} ClientboundAbilities;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundCombatEvent {
  PACKET
  int64_t event;
  int64_t duration;
  int64_t playerId;
  int32_t entityId;
  string_t message;
} ClientboundCombatEvent;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundPlayerInfo {
  PACKET
  int64_t action;
  PlayerInfo_data_type_vector_t data;
} ClientboundPlayerInfo;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundFacePlayer {
  PACKET
  int64_t feet_eyes;
  double x;
  double y;
  double z;
  uint8_t isEntity;
  int64_t entityId;
  string_t entity_feet_eyes;
} ClientboundFacePlayer;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundPosition {
  PACKET
  double x;
  double y;
  double z;
  float yaw;
  float pitch;
  int8_t flags;
  int64_t teleportId;
} ClientboundPosition;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundUnlockRecipes {
  PACKET
  int64_t action;
  uint8_t craftingBookOpen;
  uint8_t filteringCraftable;
  uint8_t smeltingBookOpen;
  uint8_t filteringSmeltable;
  string_t_vector_t recipes1;
  string_t_vector_t recipes2;
} ClientboundUnlockRecipes;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundEntityDestroy {
  PACKET
  int64_t_vector_t entityIds;
} ClientboundEntityDestroy;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundRemoveEntityEffect {
  PACKET
  int64_t entityId;
  int8_t effectId;
} ClientboundRemoveEntityEffect;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundResourcePackSend {
  PACKET
  string_t url;
  string_t hash;
} ClientboundResourcePackSend;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundRespawn {
  PACKET
  string_t dimension;
  string_t worldName;
  int64_t hashedSeed;
  uint8_t gamemode;
  uint8_t previousGamemode;
  uint8_t isDebug;
  uint8_t isFlat;
  uint8_t copyMetadata;
} ClientboundRespawn;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundEntityHeadRotation {
  PACKET
  int64_t entityId;
  int8_t headYaw;
} ClientboundEntityHeadRotation;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundSelectAdvancementTab {
  PACKET
  string_t_optional_t id;
} ClientboundSelectAdvancementTab;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundWorldBorder {
  PACKET
  int64_t action;
  double radius;
  double x;
  double z;
  double old_radius;
  double new_radius;
  int64_t speed;
  int64_t portalBoundary;
  int64_t warning_time;
  int64_t warning_blocks;
} ClientboundWorldBorder;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundCamera {
  PACKET
  int64_t cameraId;
} ClientboundCamera;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundHeldItemSlot {
  PACKET
  int8_t slot;
} ClientboundHeldItemSlot;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundUpdateViewPosition {
  PACKET
  int64_t chunkX;
  int64_t chunkZ;
} ClientboundUpdateViewPosition;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundUpdateViewDistance {
  PACKET
  int64_t viewDistance;
} ClientboundUpdateViewDistance;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundSpawnPosition {
  PACKET
  mc_position location;
} ClientboundSpawnPosition;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundScoreboardDisplayObjective {
  PACKET
  int8_t position;
  string_t name;
} ClientboundScoreboardDisplayObjective;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundEntityMetadata {
  PACKET
  int64_t entityId;
  mc_entity_metadata metadata;
} ClientboundEntityMetadata;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundAttachEntity {
  PACKET
  int32_t entityId;
  int32_t vehicleId;
} ClientboundAttachEntity;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundEntityVelocity {
  PACKET
  int64_t entityId;
  int16_t velocityX;
  int16_t velocityY;
  int16_t velocityZ;
} ClientboundEntityVelocity;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundEntityEquipment {
  PACKET
  int64_t entityId;
  mc_entity_equipment equipments;
} ClientboundEntityEquipment;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundExperience {
  PACKET
  float experienceBar;
  int64_t level;
  int64_t totalExperience;
} ClientboundExperience;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundUpdateHealth {
  PACKET
  float health;
  int64_t food;
  float foodSaturation;
} ClientboundUpdateHealth;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundScoreboardObjective {
  PACKET
  string_t name;
  int8_t action;
  string_t displayText;
  int64_t type;
} ClientboundScoreboardObjective;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundSetPassengers {
  PACKET
  int64_t entityId;
  int64_t_vector_t passengers;
} ClientboundSetPassengers;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundTeams {
  PACKET
  string_t team;
  int8_t mode;
  string_t name;
  int8_t friendlyFire;
  string_t nameTagVisibility;
  string_t collisionRule;
  int64_t formatting;
  string_t prefix;
  string_t suffix;
  string_t_vector_t players;
} ClientboundTeams;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundScoreboardScore {
  PACKET
  string_t itemName;
  int8_t action;
  string_t scoreName;
  int64_t value;
} ClientboundScoreboardScore;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundUpdateTime {
  PACKET
  int64_t age;
  int64_t time;
} ClientboundUpdateTime;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundTitle {
  PACKET
  int64_t action;
  string_t text;
  int32_t fadeIn;
  int32_t stay;
  int32_t fadeOut;
} ClientboundTitle;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundEntitySoundEffect {
  PACKET
  int64_t soundId;
  int64_t soundCategory;
  int64_t entityId;
  float volume;
  float pitch;
} ClientboundEntitySoundEffect;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundSoundEffect {
  PACKET
  int64_t soundId;
  int64_t soundCategory;
  int32_t x;
  int32_t y;
  int32_t z;
  float volume;
  float pitch;
} ClientboundSoundEffect;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundStopSound {
  PACKET
  int8_t flags;
  int64_t source;
  string_t sound;
} ClientboundStopSound;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundPlayerlistHeader {
  PACKET
  string_t header;
  string_t footer;
} ClientboundPlayerlistHeader;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundNbtQueryResponse {
  PACKET
  int64_t transactionId;
  nbt_tag_compound nbt;
} ClientboundNbtQueryResponse;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundCollect {
  PACKET
  int64_t collectedEntityId;
  int64_t collectorEntityId;
  int64_t pickupItemCount;
} ClientboundCollect;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundEntityTeleport {
  PACKET
  int64_t entityId;
  double x;
  double y;
  double z;
  int8_t yaw;
  int8_t pitch;
  uint8_t onGround;
} ClientboundEntityTeleport;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundAdvancements {
  PACKET
  uint8_t reset;
  Advancements_advancementMapping_type_vector_t advancementMapping;
  string_t_vector_t identifiers;
  Advancements_progressMapping_type_vector_t progressMapping;
} ClientboundAdvancements;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundEntityUpdateAttributes {
  PACKET
  int64_t entityId;
  EntityUpdateAttributes_properties_type_vector_t properties;
} ClientboundEntityUpdateAttributes;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundEntityEffect {
  PACKET
  int64_t entityId;
  int8_t effectId;
  int8_t amplifier;
  int64_t duration;
  int8_t hideParticles;
} ClientboundEntityEffect;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundDeclareRecipes {
  PACKET
  DeclareRecipes_recipes_type_vector_t recipes;
} ClientboundDeclareRecipes;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ClientboundTags {
  PACKET
  mc_tag_vector_t blockTags;
  mc_tag_vector_t itemTags;
  mc_tag_vector_t fluidTags;
  mc_tag_vector_t entityTags;
} ClientboundTags;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundTeleportConfirm {
  PACKET
  int64_t teleportId;
} ServerboundTeleportConfirm;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundQueryBlockNbt {
  PACKET
  int64_t transactionId;
  mc_position location;
} ServerboundQueryBlockNbt;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundSetDifficulty {
  PACKET
  uint8_t newDifficulty;
} ServerboundSetDifficulty;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundChat {
  PACKET
  string_t message;
} ServerboundChat;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundClientCommand {
  PACKET
  int64_t actionId;
} ServerboundClientCommand;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundSettings {
  PACKET
  string_t locale;
  int8_t viewDistance;
  int64_t chatFlags;
  uint8_t chatColors;
  uint8_t skinParts;
  int64_t mainHand;
} ServerboundSettings;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundTabComplete {
  PACKET
  int64_t transactionId;
  string_t text;
} ServerboundTabComplete;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundTransaction {
  PACKET
  int8_t windowId;
  int16_t action;
  uint8_t accepted;
} ServerboundTransaction;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundEnchantItem {
  PACKET
  int8_t windowId;
  int8_t enchantment;
} ServerboundEnchantItem;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundWindowClick {
  PACKET
  uint8_t windowId;
  int16_t slot;
  int8_t mouseButton;
  int16_t action;
  int8_t mode;
  mc_slot item;
} ServerboundWindowClick;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundCloseWindow {
  PACKET
  uint8_t windowId;
} ServerboundCloseWindow;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundCustomPayload {
  PACKET
  string_t channel;
  char_vector_t data;
} ServerboundCustomPayload;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundEditBook {
  PACKET
  mc_slot new_book;
  uint8_t signing;
  int64_t hand;
} ServerboundEditBook;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundQueryEntityNbt {
  PACKET
  int64_t transactionId;
  int64_t entityId;
} ServerboundQueryEntityNbt;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundUseEntity {
  PACKET
  int64_t target;
  int64_t mouse;
  float x;
  float y;
  float z;
  int64_t hand;
  uint8_t sneaking;
} ServerboundUseEntity;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundGenerateStructure {
  PACKET
  mc_position location;
  int64_t levels;
  uint8_t keepJigsaws;
} ServerboundGenerateStructure;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundKeepAlive {
  PACKET
  int64_t keepAliveId;
} ServerboundKeepAlive;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundLockDifficulty {
  PACKET
  uint8_t locked;
} ServerboundLockDifficulty;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundPosition {
  PACKET
  double x;
  double y;
  double z;
  uint8_t onGround;
} ServerboundPosition;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundPositionLook {
  PACKET
  double x;
  double y;
  double z;
  float yaw;
  float pitch;
  uint8_t onGround;
} ServerboundPositionLook;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundLook {
  PACKET
  float yaw;
  float pitch;
  uint8_t onGround;
} ServerboundLook;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundFlying {
  PACKET
  uint8_t onGround;
} ServerboundFlying;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundVehicleMove {
  PACKET
  double x;
  double y;
  double z;
  float yaw;
  float pitch;
} ServerboundVehicleMove;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundSteerBoat {
  PACKET
  uint8_t leftPaddle;
  uint8_t rightPaddle;
} ServerboundSteerBoat;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundPickItem {
  PACKET
  int64_t slot;
} ServerboundPickItem;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundCraftRecipeRequest {
  PACKET
  int8_t windowId;
  string_t recipe;
  uint8_t makeAll;
} ServerboundCraftRecipeRequest;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundAbilities {
  PACKET
  int8_t flags;
} ServerboundAbilities;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundBlockDig {
  PACKET
  int8_t status;
  mc_position location;
  int8_t face;
} ServerboundBlockDig;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundEntityAction {
  PACKET
  int64_t entityId;
  int64_t actionId;
  int64_t jumpBoost;
} ServerboundEntityAction;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundSteerVehicle {
  PACKET
  float sideways;
  float forward;
  uint8_t jump;
} ServerboundSteerVehicle;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundCraftingBookData {
  PACKET
  int64_t type;
  string_t displayedRecipe;
  uint8_t craftingBookOpen;
  uint8_t craftingFilter;
  uint8_t smeltingBookOpen;
  uint8_t smeltingFilter;
  uint8_t blastingBookOpen;
  uint8_t blastingFilter;
  uint8_t smokingBookOpen;
  uint8_t smokingFilter;
} ServerboundCraftingBookData;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundNameItem {
  PACKET
  string_t name;
} ServerboundNameItem;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundResourcePackReceive {
  PACKET
  int64_t result;
} ServerboundResourcePackReceive;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundAdvancementTab {
  PACKET
  int64_t action;
  string_t tabId;
} ServerboundAdvancementTab;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundSelectTrade {
  PACKET
  int64_t slot;
} ServerboundSelectTrade;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundSetBeaconEffect {
  PACKET
  int64_t primary_effect;
  int64_t secondary_effect;
} ServerboundSetBeaconEffect;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundHeldItemSlot {
  PACKET
  int16_t slotId;
} ServerboundHeldItemSlot;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundUpdateCommandBlock {
  PACKET
  mc_position location;
  string_t command;
  int64_t mode;
  uint8_t flags;
} ServerboundUpdateCommandBlock;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundUpdateCommandBlockMinecart {
  PACKET
  int64_t entityId;
  string_t command;
  uint8_t track_output;
} ServerboundUpdateCommandBlockMinecart;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundSetCreativeSlot {
  PACKET
  int16_t slot;
  mc_slot item;
} ServerboundSetCreativeSlot;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundUpdateJigsawBlock {
  PACKET
  mc_position location;
  string_t name;
  string_t target;
  string_t pool;
  string_t finalState;
  string_t jointType;
} ServerboundUpdateJigsawBlock;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundUpdateStructureBlock {
  PACKET
  mc_position location;
  int64_t action;
  int64_t mode;
  string_t name;
  uint8_t offset_x;
  uint8_t offset_y;
  uint8_t offset_z;
  uint8_t size_x;
  uint8_t size_y;
  uint8_t size_z;
  int64_t mirror;
  int64_t rotation;
  string_t metadata;
  float integrity;
  int64_t seed;
  uint8_t flags;
} ServerboundUpdateStructureBlock;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundUpdateSign {
  PACKET
  mc_position location;
  string_t text1;
  string_t text2;
  string_t text3;
  string_t text4;
} ServerboundUpdateSign;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundArmAnimation {
  PACKET
  int64_t hand;
} ServerboundArmAnimation;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundSpectate {
  PACKET
  mc_uuid target;
} ServerboundSpectate;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundBlockPlace {
  PACKET
  int64_t hand;
  mc_position location;
  int64_t direction;
  float cursorX;
  float cursorY;
  float cursorZ;
  uint8_t insideBlock;
} ServerboundBlockPlace;
void encode(FILE* dest);
void decode(FILE* src);

typedef struct ServerboundUseItem {
  PACKET
  int64_t hand;
} ServerboundUseItem;
void encode(FILE* dest);
void decode(FILE* src);

#endif
